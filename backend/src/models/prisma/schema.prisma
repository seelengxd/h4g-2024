// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  password      String
  phone         String
  email         String         @unique
  role          Role           @default(USER)
  fullName      String
  preferredName String
  profile       Profile?
  blogs         Blog[]
  likes         Like[]
  registrations Registration[]
  submissions   Submission[]
}

enum Gender {
  Male
  Female
  Other
}

enum Salutation {
  Mr
  Mrs
  Ms
  Miss
  Madam
  Dr
}

enum CommitmentLevel {
  Adhoc
  Weekly
  Monthly
}

enum ImmigrationStatus {
  Citizen
  Pr
  Ep
  Dp
  LOC
  WP
  Visitor
}

enum EducationLevel {
  No
  Primary
  LowerSecondary
  Secondary
  PostSecondary
  Diploma
  Professional
  Bachelor
  Master
  Doctorate
}

model Profile {
  id                Int                @id @default(autoincrement())
  dob               DateTime?
  description       String?
  interests         Interest[]
  skills            Skill[]
  gender            Gender?
  driving           Boolean?
  ownVehicle        Boolean?
  commitmentLevel   CommitmentLevel?
  immigrationStatus ImmigrationStatus?
  educationLevel    EducationLevel?

  // bit-string
  availability String?

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  imageUrl String?
}

model Interest {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  profiles      Profile[]
  blogs         Blog[]
  organisations Organisation[]
}

model Skill {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  profiles Profile[]
}

model Organisation {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  imageUrl    String?
  websiteUrl  String?
  activities  Activity[]
  categories  Interest[]
}

enum ActivityType {
  VOLUNTEER
  WORKSHOP
  TRAINING
}

model Image {
  id         Int       @id @default(autoincrement())
  imageUrl   String
  activity   Activity? @relation(fields: [activityId], references: [id])
  activityId Int?
}

model Activity {
  id          Int          @id @default(autoincrement())
  name        String
  type        ActivityType @default(VOLUNTEER)
  description String       @default("This is a fun activity!")
  capacity    Int?
  location    String
  images      Image[]

  organisation   Organisation    @relation(fields: [organisationId], references: [id])
  organisationId Int
  sessions       Session[]
  enrollmentForm EnrollmentForm?
}

model Session {
  id    Int      @id @default(autoincrement())
  start DateTime
  end   DateTime

  activity      Activity       @relation(fields: [activityId], references: [id])
  activityId    Int
  registrations Registration[]
}

model Registration {
  id         Int      @id @default(autoincrement())
  attendance Boolean?

  user   User @relation(fields: [userId], references: [id])
  userId Int

  session   Session @relation(fields: [sessionId], references: [id])
  sessionId Int

  feedback     Feedback?
  submission   Submission? @relation(fields: [submissionId], references: [id])
  submissionId Int?
}

enum FeedbackStatus {
  Pending
  Approved
  Rejected
}

model Feedback {
  id             Int            @id @default(autoincrement())
  userReflection String
  actualFeedback String?
  minutesServed  Int?
  status         FeedbackStatus @default(Pending)

  registration   Registration? @relation(fields: [registrationId], references: [id])
  registrationId Int?          @unique
}

model EnrollmentForm {
  id         Int  @id @default(autoincrement())
  formSchema Json

  activityId  Int          @unique
  activity    Activity     @relation(fields: [activityId], references: [id])
  submissions Submission[]
}

model Submission {
  id     Int  @id @default(autoincrement())
  answer Json

  user User @relation(fields: [userId], references: [id])

  enrollmentForm   EnrollmentForm @relation(fields: [enrollmentFormId], references: [id])
  enrollmentFormId Int
  userId           Int

  registrations Registration[]

  @@unique([enrollmentFormId, userId])
}

model Blog {
  id          Int    @id @default(autoincrement())
  title       String
  description String

  userId Int
  user   User @relation(fields: [userId], references: [id])

  tags  Interest[]
  likes Like[]

  createdAt DateTime @default(now())
  imageUrl  String?
}

model Like {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  blogId Int
  blog   Blog @relation(fields: [blogId], references: [id])
}
